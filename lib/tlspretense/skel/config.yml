---
# This hostname is the one that the test runner will actually perform its test
# against. All other intercepted SSL connections will use the original
# certificate, but doctored to use the goodca. For this hostname, the SSL
# interceptor will present the configured certificate chain of generated
# certificates.
#
# Additionally, the defaultsubject and defaultsubjectwithnull strings will
# replace %HOSTNAME% with this value during certificate generation.
#hostname: my.hostname.com
hostname: www.isecpartners.com

# Configuration options to pass to PacketThief to configure your firewall.
packetthief:
  # Explicitly declare what firewall implementation to use for intercepting
  # traffic. It is also needed to discover the original destination of
  # intercepted network traffic. There are two special implementations: the
  # 'manual' implementation is meant for when you don't use a firewall at all.
  # In this case, you must explicitly provide an original destination for the
  # proxy to forward all intercepted traffic to.
  #
  # The second special implementation is 'external'. This means that you are
  # using a supported firewall, but you want to configure the redirection rule
  # outside of TLSPretense. In this case, you need to name an actual firewall
  # implementation so that the socket that receives the intercepted connection
  # can acquire the original destination (redirected connections provide their
  # original destination through various standard socket APIs).
  #
  # It the implementation is left commented out, then TLSPretense will guess
  # which implementation to use.
  #
  # Options:
  #
  # - netfilter                 Linux netfilter
  #
  # - ipfw                      MacOSX10.6/BSD ipfw
  #
  # - pfrdr                     MacOSX10.7(and 10.8)'s version of PF
  #
  # - manual(destination)       If you choose manual, you must also choose a
  #                             default destination address or hostname.
  #
  # - external(implementation)  Use firewall rules that are not managed by the
  #                             test harness, but that might provide us with
  #                             the original destination.
  #implementation: manual(www.isecpartners.com)

  # The remaining options are used to construct the firewall rule:
  protocol: tcp
  dest_port: 443
  # Linux-like interface:
  in_interface: eth1
  # Mac OS X-like interface:
  #in_interface: en1

# The port that PacketThief should redirect traffic to, and the port that the
# SSL interceptor will run on during each test.
listener_port: 54321

# The testing_method is used to determine whether the client has accepted or
# rejected a certificate. If you find any of these to be unreliable, then you
# will need to determine pass/fail yourself.
#
# - tlshandshake    We say that the client accepts a test if it completes the
#                   TLS handshake, and it rejects a request if it does not
#                   complete the handshake.
# - senddata        We say that the client accepts a test if it sends data,
#                   instead of whether it completes the TLS handshake. This may
#                   be necessary for Android and probably other Java-based SSL
#                   using code.
testing_method: senddata

# Meta-configuration for certificate generation. These values affect the
# default settings for certificate generation.
certmaker:
  # The default subject string used by the generated certificates. Note that
  # the substring %HOSTNAME% will be replaced with the value of hostname.
  defaultsubject: &defaultsubject "C=US, CN=%HOSTNAME%"

  # The default subject string for the null in subject certificate test.
  # Intended to be almost identical to the defaultsubject.
  defaultsubjectwithnull: &defaultsubjectwithnull "C=US, CN=%HOSTNAME%\0.foo.com"

  # a subject string, but with the the hostname's parent domain instead of its
  # domain. A test that should fail.
  defaultparentsubject: &defaultparentsubject "C=US, CN=%PARENTHOSTNAME%"

  # The directory where pregenerated certificates should be stored.
  outdir: certs

  # If a serial number is not explicitly set on a certificate definition, then
  # this value helps decide how the certificate factory generates the
  # certificate. Possible values:
  #
  # * <a number>  Use this predefined value as the serial number. Note that
  #               some SSL clients (eg, Firefox) will detect duplicate serial
  #               numbers during a single run of the application.
  #
  # * random      randomly generate a serial number
  missing_serial_generation: random

  # customgoodca allows you to load a CA certificate and key from a file. If it
  # is commented out, then CertMaker will generate a new CA every time it is
  # run. If this entry exists, but the files do not exist, then the first time
  # goodca is generated, it will also be copied to these file locations in
  # order to reuse it in the future.
  customgoodca:
    # The path to the PEM encoded certificate:
    certfile: ca/goodcacert.pem
    # The path to the PEM encoded key:
    keyfile:  ca/goodcakey.pem
    # Uncomment keypass and set the password only if your key needs a password.
    # If there is no password, leave it commented out. Note that the copy of
    # the CA that will be created in the certs directory will not have any
    # password protection.
    #keypass: changeme

logger:
  level: INFO
  file: '-'

certs:
  goodca: &goodca
    subject: "C=US, CN=Trusted CA"
    issuer: self
    not_before: now
    not_after: +365
    extensions:
    - "keyUsage = critical, keyCertSign"  # can sign certificates
    - "basicConstraints = critical,CA:true"
    - "subjectKeyIdentifier=hash"
    - "authorityKeyIdentifier=keyid:always"
    key_type: RSA
    key_size: 1024
    signing_alg: SHA1

  unknownca: &unknownca
    <<: *goodca
    subject: "C=US, CN=Unknown CA"

  goodintermediate: &goodintermediate
    <<: *goodca
    subject: "C=US, CN=Intermediate Cert"
    issuer: goodca

  baseline: &baseline
    subject: *defaultsubject
    issuer: goodca
    not_before: now
    not_after: +365
    extensions:
    - "keyUsage=digitalSignature, keyEncipherment" # can sign data and can encrypt symmetric keys
    - "extendedKeyUsage=serverAuth, clientAuth" # can be used as both a www server cert and www client cert
    - "authorityKeyIdentifier=keyid:always"
    - "subjectKeyIdentifier=hash"
    - "basicConstraints = critical,CA:FALSE"
    key_type: RSA
    key_size: 1024
    signing_alg: SHA1

  wrongcname: &wrongcname
    <<: *baseline
    subject: "C=US, CN=www.foo.com"

  parentcname: &parentcname
    <<: *baseline
    subject: *defaultparentsubject

  nullincname: &nullincname
    <<: *baseline
    subject: *defaultsubjectwithnull

  baselinesubjectaltname: &baselinesubjectaltname
    <<: *baseline
    addextensions:
    - "subjectAltName=DNS:%HOSTNAME%"

  subjectaltnameonly: &subjectaltnameonly
    <<: *baseline
    subject: "C=US, O=My Awesome Organization"
    addextensions:
    - "subjectAltName=DNS:%HOSTNAME%"

  wrongsubjectaltnamerightsubject: &wrongsubjectaltnamerightsubject
    <<: *baseline
    addextensions:
    - "subjectAltName=DNS:www.foo.com"

  wrongsubjectaltnamewrongsubject: &wrongsubjectaltnamewrongsubject
    <<: *baseline
    subject: "C=US, CN=www.foo.com"
    addextensions:
    - "subjectAltName=DNS:www.foo.com"

  # The nullinsubjectaltname certificate will generate as intended with
  # TLSPretense 0.7.0 and later. TLSPretense partially reconstructs
  # subjectAltName extensions that contain a null byte in a DNSName. Note that
  # the OpenSSL command line display of the certificate will truncate a
  # subjectAltName DNSName entry at the null byte, failing to display the full
  # entry. Eg:
  #
  #     $ openssl x509 -in certs/nullinsubjectaltnamecert.pem -noout -text
  #     ...
  #                 X509v3 Subject Alternative Name:
  #                     DNS:www.isecpartners.com, DNS:another.com
  #     ...
  #
  # when the first entry is actually "www.isecpartners.com\0.foo.com". However,
  # the full DNSName can be verified by examining the bytes of the DER encoding
  # of the certificate, or by parsing the extension and carefully examining the
  # ASN1 tree.
  nullinsubjectaltname: &nullinsubjectaltname
    <<: *subjectaltnameonly
    addextensions:
    - "subjectAltName=DNS:%HOSTNAME%\x00.foo.com, DNS:another.com"

  parentinsubjectaltname: &parentinsubjectaltname
    <<: *subjectaltnameonly
    addextensions:
    - "subjectAltName=DNS:%PARENTHOSTNAME%"

  # extended key usage specifies code signing instead of serverAuth
  wrongextendedkeyusage: &wrongextendedkeyusage
    <<: *baseline
    blockextensions:
    - extendedKeyUsage
    addextensions:
    - "extendedKeyUsage = codeSigning"

  rightextendedkeyusagecrit: &rightextendedkeyusagecrit
    <<: *baseline
    blockextensions:
    - extendedKeyUsage
    addextensions:
    - "extendedKeyUsage = critical,serverAuth"
  wrongextendedkeyusagecrit: &wrongextendedkeyusagecrit
    <<: *baseline
    blockextensions:
    - extendedKeyUsage
    addextensions:
    - "extendedKeyUsage = critical,codeSigning"

  selfsigned: &selfsigned
    <<: *baseline
    issuer: self
    blockextensions:
    - authorityKeyIdentifier

  unknowncacert: &unknowncacert
    <<: *baseline
    issuer: unknownca

  badsignature: &badsignature
    <<: *baseline
    signing_key: unknownca # signing_key defaults to the issuer unless added.

  # we should probably also check for bad keyUsage, since keyUsage=keyCertSign also grants CA abilities
  cafalseintermediate: &cafalseintermediate
    <<: *baseline
    subject: "C=US, CN=Intermediate with BasicConstraints CA:FALSE"

  signedbycafalseint: &signedbycafalseint
    <<: *baseline
    issuer: cafalseintermediate

  # we should probably also check for bad keyUsage, since keyUsage=keyCertSign also grants CA abilities
  nobcintermediate: &nobcintermediate
    <<: *baseline
    subject: "C=US, CN=Intermediate with no basicConstraints"
    blockextensions:
    - basicconstraints

  signedbynobcint:
    <<: *baseline
    issuer: nobcintermediate

  badsigintermediate:
    <<: *goodintermediate
    subject: "C=US, CN=Intermediate with bad signature"
    signing_key: unknownca # signing_key defaults to the issuer unless added

  signedbybadsigintermediate:
    <<: *baseline
    issuer: badsigintermediate

  # identical to goodca, but with its own key
  cawithdifferentkey:
    <<: *goodca

  signedbydifferentkey:
    <<: *baseline
    issuer: cawithdifferentkey

  expiredcert:
    <<: *baseline
    not_before: -365
    not_after: -30

  notyetvalidcert:
    <<: *baseline
    not_before: 365
    not_after: 730

  expiredintermediate:
    <<: *goodintermediate
    subject: "C=US, CN=Expired Intermediate"
    not_before: -365
    not_after: -30

  signedbyexpiredint:
    <<: *baseline
    issuer: expiredintermediate

  signedwithmd5:
    <<: *baseline
    signing_alg: MD5

  signedwithmd4:
    <<: *baseline
    signing_alg: MD4

  expiredca: &expiredca
    <<: *goodca
    subject: "C=US, CN=Expired CA"
    not_before: -365
    not_after: -30

  signedbyexpiredca:
    <<: *baseline
    issuer: expiredca

  unknownnoncriticalextension:
    <<: *baseline
    addextensions:
    - oid: 1.2.3.4.5.6.7.8.9.10
      value: ' ' # must have something
      critical: false

  unknowncriticalextension:
    <<: *baseline
    addextensions:
    - oid: 1.2.3.4.5.6.7.8.9.10
      value: ' ' # must have something
      critical: true

tests:
# baseline
- alias: baseline
  name: Baseline Happy Test
  certchain:
  - baseline
  - goodca
  expected_result: connected
  description: |
    A "good" certificate and chain that should always pass. If this test fails,
    then your client probably does not trust the goodca CA certificate.

# cname tests
- alias: wrongcname
  name: Wrong CNAME
  certchain:
  - wrongcname
  - goodca
  expected_result: rejected
  description: |
    If the supplied CNAME does not match the expected hostname (and there is no
    subjectAltName), then the certificate is for the wrong host.

# cname tests
- alias: parentcname
  name: "Parent domain's CNAME"
  certchain:
  - parentcname
  - goodca
  expected_result: rejected
  description: |
    Sanity check for extremely lenient hostname verification. A common name on
    a certificate should match all of a hostname, not just the parent domain.

- alias: nullincname
  name: Null character in CNAME
  certchain:
  - nullincname
  - goodca
  expected_result: rejected
  description: |
    If the common name contains a null character (often represented
    in printable form as "\0" or "\x00" for single-byte text encodings), then
    an attacker might be able to bypass hostname validation that uses C
    strings. For example, a common name of "example.com\x00.evil.com", when
    interpreted as a C string, would match "example.com".

# subjectAltName tests
- alias: happysubjectaltname
  name: Hostname is a dNSName in subjectAltName and in subject
  certchain:
  - baselinesubjectaltname
  - goodca
  expected_result: connected
  description: |
  Test to ensure that the client does not behave badly if the hostname is in
  both the common name and in a dNSName subjectAltNAme entry.

- alias: happysubjectaltnameonly
  name: hostname only a dNSName subjectAltName
  certchain:
  - subjectaltnameonly
  - goodca
  expected_result: connected
  description: |
    Test to ensure that the client supports a matching dNSName entry in the
    subjectAltName when the hostname is not represented in the common name.

- alias: wrongsubjectaltnamewrongsubject
  name: hostname in neither subjectAltName nor subject
  certchain:
  - wrongsubjectaltnamewrongsubject
  - goodca
  expected_result: rejected
  description: |
    If the hostname is not in either a subjectAltName or the common name, then
    the certificate does not match the hostname. Failure to reject means an
    attacker may be able to use a certificate for a different hostname to spoof
    users.

- alias: wrongsubjectaltnamerightsubject
  name: hostname in subject but not in subjectAltName
  certchain:
  - wrongsubjectaltnamerightsubject
  - goodca
  expected_result: rejected
  description: |
    If a certificate has a subjectAltName extension, then the client should not
    check the common name. The common name does not have to be a hostname, and
    there might be circumstance where a CA allows an arbitrary common name that
    happens to match someone elses hostname.

- alias: nullinsubjectaltname
  name: "null byte in subjectAltName"
  certchain:
  - nullinsubjectaltname
  - goodca
  expected_result: rejected
  description: |
    dNSName entries in the subjectAltName extension are susceptible to null
    characters, just like the common name. If a dNSName entry contains a null
    character (often represented in printable form as "\0" or "\x00" for
    single-byte text encodings), then an attacker might be able to bypass
    hostname validation that uses C strings. For example, a dNSName of
    "example.com\x00.evil.com", when interpreted as a C string, would match
    "example.com".

- alias: parentinsubjectaltname
  name: "parent domain in subjectAltName"
  certchain:
  - parentinsubjectaltname
  - goodca
  expected_result: rejected
  description: |
    A dNSName entry should match all of a hostname, not just the parent domain.

# key usage
- alias: wrongextendedkeyusage
  name: extendedKeyUsage lacks serverAuth
  certchain:
  - wrongextendedkeyusage
  - goodca
  expected_result: rejected
  description: |
    If a certificate has an extendedKeyUsage extension, then a client should
    ensure that the certificate has the right usage flags set. TLSPretense
    assumes the client is connecting to a server (as opposed to validating the
    signature on an SMIME-signed email message, code signature, or some other
    operation), so a certificate that has an extendedKeyUsage that lacks the
    serverAuth bit should be rejected.
    
    To exploit, an attacker would need to have a valid certificate for the
    targeted domain, except that its extendedKeyUsage states it is for some
    other purpose, such as code signing, non-repudiation, or OCSP signing.

- alias: rightextendedkeyusagecrit
  name: extendedKeyUsage lacks serverAuth
  certchain:
  - rightextendedkeyusagecrit
  - goodca
  expected_result: connected
  description: |
    Happy test that essentially duplicates the baseline test, but for
    comparison to the other extendedKeyUsage tests.

#####################
# This one fails against Java/Android's standard SSL client code.
- alias: wrongextendedkeyusagecrit
  name: extendedKeyUsage lacks serverAuth
  certchain:
  - wrongextendedkeyusagecrit
  - goodca
  expected_result: rejected
  description: |
    If the extendedKeyUsage extension is marked critical, and it has the wrong
    flags set, then the client should reject this certificate. This particular
    test is here to help determine whether a client that failed the
    wrongextendedkeyusage test also properly honors the critical flag.

#####################

# cert chain issues
- alias: selfsigned
  name: Selfsigned certificate
  certchain:
  - selfsigned
  expected_result: rejected
  description: |
    Anyone can create an arbitrary self-signed certificate. Without some
    non-PKI mechanism for verifying whether the certificate is valid or not,
    self-signed certificates cannot be trusted at all.

- alias: unknownca
  name: Signed by an untrusted CA
  certchain:
  - unknowncacert
  - unknownca
  expected_result: rejected
  description: |
    A certificate signed by a CA that the client is unaware of is as dangerous
    as a self-signed certificate -- anyone can craft such a certificate chain.

- alias: differentkeyca
  name: Signed by an untrusted CA (provided in the chain) with the same name but a different key
  certchain:
  - signedbydifferentkey
  - cawithdifferentkey
  expected_result: rejected
  description: |
    When validating the certificate chain, it is critical for a client to
    ensure that the CA is valid. An attacker could craft a CA that is identical
    in every way to a CA that the client trusts but that uses a different
    key-pair. This would easily allow an attacker to spoof a legitimate
    certificate.

- alias: badsignature
  name: Bad signature
  certchain:
  - badsignature
  - goodca
  expected_result: rejected
  description: |
    If the signature on the leaf certificate does not match the public key of
    the CA that signed it, then an attacker could easily spoof the site.

- alias: cafalseintermediate
  name: "Intermediate certificate where BasicConstraints sets CA:FALSE"
  certchain:
  - signedbycafalseint
  - cafalseintermediate
  - goodca
  expected_result: rejected
  description: |
    While verifying the certificate chain, the client should ensure that all
    certificates that attest to the identity of the leaf certificate are
    actually CAs themselves (including all intermediate certificates).
    Otherwise, an attacker could take a legitimate leaf node and use it to sign
    a fake certificate. The verificate of the certificate chain passes because
    the client fails to check the BasicConstraints.

- alias: nobcintermediate
  name: Intermediate certificate lacks BasicConstraints
  certchain:
  - signedbynobcint
  - nobcintermediate
  - goodca
  expected_result: rejected
  description: |
    An intermediate certificate that lacks the BasicConstraints extension
    should be treated as if its constriants stated that it was not a CA
    (CA:FALSE).

- alias: badsigonintermediate
  name: Intermediate certificate has bad signature from CA
  certchain:
  - signedbybadsigintermediate
  - badsigintermediate
  - goodca
  expected_result: rejected
  description: |
    If the signature on an intermediate certificate does not match the public
    key of the CA that signed it, then an attacker could easily spoof the leaf
    certificate.

- alias: signedwithmd5
  name: Certificate signed with MD5
  certchain:
  - signedwithmd5
  - goodca
  expected_result: rejected
  description: |
    MD5 is a hash signing algorithm with known weaknesses. Researchers have
    been able to create signature collisions, which means an attacker might be
    able to create a certificate whose MD5 hash matches that of a certificate
    with a valid signature. However, many existing certificates are signed with
    MD5, although new leaf certificates should not be signed this way.

- alias: signedwithmd4
  name: Certificate signed with MD4
  certchain:
  - signedwithmd4
  - goodca
  expected_result: rejected
  description: |
    MD5 is a deprecated hash signing algorithm. It should never be used.

## Need OpenSSL built with MD2 support
#- alias: signedwithmd2
#  name: Certificate signed with MD2
#  certchain:
#  - signedwithmd2
#  - goodca
#  expected_result: rejected
#  description: |
#    MD2 is an even older hash signing algorithm.

- alias: expiredcert
  name: Certificate that has expired
  certchain:
  - expiredcert
  - goodca
  expected_result: rejected
  description: |
    An expired certificate should not be trusted by a client. CAs mandate
    expiration dates in order to limit how long a certificate is valid for.
    This allows them to charge money to re-issue a certificate, but it also
    allows them change certificate requirements over time and eventually phase
    out old certificates.

- alias: notyetvalidcert
  name: Certificate that is valid in the future
  certchain:
  - notyetvalidcert
  - goodca
  expected_result: rejected
  description: |
    A certificate that is not yet valid is suspicious. Either the client's
    clock is running slow, or something else odd is going on.'

- alias: expiredintermediate
  name: Certificate signed by an intermediate that has expired
  certchain:
  - signedbyexpiredint
  - expiredintermediate
  - goodca
  expected_result: rejected
  description: |
    An expired certificate, including expired intermediate certificates, should
    not be trusted by a client. CAs mandate expiration dates in order to limit
    how long a certificate is valid for. This allows them to charge money to
    re-issue a certificate, but it also allows them change certificate
    requirements over time and eventually phase out old certificates.

# This requires installing the expired CA that is also installed into the
# client's trusted root store.
#- alias: expiredca
#  name: "Certificate signed by a trusted, but expired CA"
#  certchain:
#  - signedbyexpiredca
#  - expiredca
#  expected_result: rejected
#  description: |
#    An expired CA should not be trusted. If the CA has been compromised since
#    its expiration (eg, the company who created it went out of business and its
#    assets were sold, including drives that contained the CA's private key),
#    then an attacker could use it to create arbitrary certificates that would
#    work against clients that still trust the CA.'

- alias: unknownnoncriticalextension
  name: Certificate contains a non-critical extension that the client does not understand
  certchain:
  - unknownnoncriticalextension
  - goodca
  expected_result: connected
  description: |
    In general, a well behaved client should ignore non-critical extensions
    that it does not know how to validate. This test exepcts clients to ignore
    such an extension, although rejecting an arbitrary non-critical extension
    does not create a security issue (although the client may not be very
    usable in practice).

- alias: unknowncriticalextension
  name: Certificate contains a critical extension that the client does not understand
  certchain:
  - unknowncriticalextension
  - goodca
  expected_result: rejected
  description: |
    A well behaved client must reject the certificate if the certificate has an
    extension marked critical that it does not know how to validate. Many
    extensions on legitimately signed certificates are marked as critical to
    force clients to verify them. Being unable to verify a particular critical
    extension could mean that someone could use some other nearly identical
    certificate (aside from the details of the unhandled critical extension) in
    place of the correct one.
